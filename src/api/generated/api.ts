/* tslint:disable */
/* eslint-disable */
/**
 * Fitracker API
 * Fitracker API documentation. [View JSON Spec](./api-json)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthenticationResponseDto
 */
export interface AuthenticationResponseDto {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationResponseDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationResponseDto
     */
    'refreshToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationResponseDto
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface BodyPartDto
 */
export interface BodyPartDto {
    /**
     * 
     * @type {number}
     * @memberof BodyPartDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BodyPartDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ConfirmEmailVerificationCodeDto
 */
export interface ConfirmEmailVerificationCodeDto {
    /**
     * 
     * @type {string}
     * @memberof ConfirmEmailVerificationCodeDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ConfirmEmailVerificationCodeDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface CreateWorkoutResponseDto
 */
export interface CreateWorkoutResponseDto {
    /**
     * 
     * @type {WorkoutResponseDto}
     * @memberof CreateWorkoutResponseDto
     */
    'workout': WorkoutResponseDto;
    /**
     * 
     * @type {WorkoutStatsDto}
     * @memberof CreateWorkoutResponseDto
     */
    'workoutStats': WorkoutStatsDto;
}
/**
 * 
 * @export
 * @interface DeleteWorkoutDto
 */
export interface DeleteWorkoutDto {
    /**
     * 
     * @type {number}
     * @memberof DeleteWorkoutDto
     */
    'totalUserXp': number;
}
/**
 * 
 * @export
 * @interface EquipmentDto
 */
export interface EquipmentDto {
    /**
     * 
     * @type {number}
     * @memberof EquipmentDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EquipmentDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ExerciseDetailsDto
 */
export interface ExerciseDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof ExerciseDetailsDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDetailsDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDetailsDto
     */
    'bodyPart': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDetailsDto
     */
    'equipment': string;
    /**
     * 
     * @type {boolean}
     * @memberof ExerciseDetailsDto
     */
    'isCustom': boolean;
    /**
     * 
     * @type {Array<ExerciseWorkoutHistoryDto>}
     * @memberof ExerciseDetailsDto
     */
    'workoutHistory': Array<ExerciseWorkoutHistoryDto>;
}
/**
 * 
 * @export
 * @interface ExerciseRequestDto
 */
export interface ExerciseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ExerciseRequestDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseRequestDto
     */
    'equipmentId': number;
    /**
     * 
     * @type {number}
     * @memberof ExerciseRequestDto
     */
    'bodyPartId': number;
}
/**
 * 
 * @export
 * @interface ExerciseResponseDto
 */
export interface ExerciseResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ExerciseResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseResponseDto
     */
    'equipment': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseResponseDto
     */
    'bodyPart': string;
    /**
     * 
     * @type {boolean}
     * @memberof ExerciseResponseDto
     */
    'isCustom': boolean;
}
/**
 * 
 * @export
 * @interface ExerciseWithWorkoutDetailsDto
 */
export interface ExerciseWithWorkoutDetailsDto {
    /**
     * 
     * @type {string}
     * @memberof ExerciseWithWorkoutDetailsDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseWithWorkoutDetailsDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseWithWorkoutDetailsDto
     */
    'bodyPart': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseWithWorkoutDetailsDto
     */
    'equipment': string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseWithWorkoutDetailsDto
     */
    'numTimesUsed': number;
    /**
     * 
     * @type {Array<RecentSetDto>}
     * @memberof ExerciseWithWorkoutDetailsDto
     */
    'recentSets': Array<RecentSetDto>;
}
/**
 * 
 * @export
 * @interface ExerciseWorkoutHistoryDto
 */
export interface ExerciseWorkoutHistoryDto {
    /**
     * 
     * @type {string}
     * @memberof ExerciseWorkoutHistoryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseWorkoutHistoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseWorkoutHistoryDto
     */
    'createdAt': string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseWorkoutHistoryDto
     */
    'duration': number;
    /**
     * 
     * @type {Array<WorkoutSetResponseDto>}
     * @memberof ExerciseWorkoutHistoryDto
     */
    'sets': Array<WorkoutSetResponseDto>;
}
/**
 * 
 * @export
 * @interface RecentSetDto
 */
export interface RecentSetDto {
    /**
     * 
     * @type {string}
     * @memberof RecentSetDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof RecentSetDto
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof RecentSetDto
     */
    'reps': number;
    /**
     * 
     * @type {number}
     * @memberof RecentSetDto
     */
    'rpe': number;
}
/**
 * 
 * @export
 * @interface ResetPasswordDto
 */
export interface ResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'confirmPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface UpdateWeeklyWorkoutGoalDto
 */
export interface UpdateWeeklyWorkoutGoalDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateWeeklyWorkoutGoalDto
     */
    'weeklyWorkoutGoal': number;
}
/**
 * 
 * @export
 * @interface UserLoginDto
 */
export interface UserLoginDto {
    /**
     * 
     * @type {string}
     * @memberof UserLoginDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserProfileDto
 */
export interface UserProfileDto {
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'lastName': string;
    /**
     * 
     * @type {number}
     * @memberof UserProfileDto
     */
    'weeklyWorkoutGoal': number;
}
/**
 * 
 * @export
 * @interface UserSignupDto
 */
export interface UserSignupDto {
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    'confirmPassword': string;
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface VerifyEmailDto
 */
export interface VerifyEmailDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyEmailDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface WorkoutExerciseRequestDto
 */
export interface WorkoutExerciseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutExerciseRequestDto
     */
    'exerciseId': string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseRequestDto
     */
    'order': number;
    /**
     * 
     * @type {Array<WorkoutSetRequestDto>}
     * @memberof WorkoutExerciseRequestDto
     */
    'sets': Array<WorkoutSetRequestDto>;
}
/**
 * 
 * @export
 * @interface WorkoutExerciseResponseDto
 */
export interface WorkoutExerciseResponseDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutExerciseResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutExerciseResponseDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutExerciseResponseDto
     */
    'order': number;
    /**
     * 
     * @type {Array<WorkoutSetResponseDto>}
     * @memberof WorkoutExerciseResponseDto
     */
    'sets': Array<WorkoutSetResponseDto>;
}
/**
 * 
 * @export
 * @interface WorkoutRequestDto
 */
export interface WorkoutRequestDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutRequestDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutRequestDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutRequestDto
     */
    'lastUpdatedAt': string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutRequestDto
     */
    'duration': number;
    /**
     * 
     * @type {Array<WorkoutExerciseRequestDto>}
     * @memberof WorkoutRequestDto
     */
    'exercises': Array<WorkoutExerciseRequestDto>;
}
/**
 * 
 * @export
 * @interface WorkoutResponseDto
 */
export interface WorkoutResponseDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutResponseDto
     */
    'duration': number;
    /**
     * 
     * @type {Array<WorkoutExerciseResponseDto>}
     * @memberof WorkoutResponseDto
     */
    'exercises': Array<WorkoutExerciseResponseDto>;
}
/**
 * 
 * @export
 * @interface WorkoutSetRequestDto
 */
export interface WorkoutSetRequestDto {
    /**
     * 
     * @type {number}
     * @memberof WorkoutSetRequestDto
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutSetRequestDto
     */
    'reps': number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutSetRequestDto
     */
    'rpe': number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkoutSetRequestDto
     */
    'order': number;
}
/**
 * 
 * @export
 * @interface WorkoutSetResponseDto
 */
export interface WorkoutSetResponseDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutSetResponseDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutSetResponseDto
     */
    'order': number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutSetResponseDto
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutSetResponseDto
     */
    'reps': number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutSetResponseDto
     */
    'rpe': number | null;
}
/**
 * 
 * @export
 * @interface WorkoutStatsDto
 */
export interface WorkoutStatsDto {
    /**
     * 
     * @type {number}
     * @memberof WorkoutStatsDto
     */
    'totalWorkoutXp': number;
    /**
     * 
     * @type {number}
     * @memberof WorkoutStatsDto
     */
    'workoutEffortXp': number;
}
/**
 * 
 * @export
 * @interface WorkoutTemplateExerciseRequestDto
 */
export interface WorkoutTemplateExerciseRequestDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutTemplateExerciseRequestDto
     */
    'exerciseId': string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutTemplateExerciseRequestDto
     */
    'order': number;
    /**
     * 
     * @type {Array<WorkoutTemplateSetRequestDto>}
     * @memberof WorkoutTemplateExerciseRequestDto
     */
    'sets': Array<WorkoutTemplateSetRequestDto>;
}
/**
 * 
 * @export
 * @interface WorkoutTemplateExerciseResponseDto
 */
export interface WorkoutTemplateExerciseResponseDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutTemplateExerciseResponseDto
     */
    'exerciseId': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutTemplateExerciseResponseDto
     */
    'exerciseName': string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutTemplateExerciseResponseDto
     */
    'order': number;
    /**
     * 
     * @type {Array<WorkoutTemplateSetResponseDto>}
     * @memberof WorkoutTemplateExerciseResponseDto
     */
    'sets': Array<WorkoutTemplateSetResponseDto>;
}
/**
 * 
 * @export
 * @interface WorkoutTemplateRequestDto
 */
export interface WorkoutTemplateRequestDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutTemplateRequestDto
     */
    'name': string;
    /**
     * 
     * @type {Array<WorkoutTemplateExerciseRequestDto>}
     * @memberof WorkoutTemplateRequestDto
     */
    'exercises': Array<WorkoutTemplateExerciseRequestDto>;
}
/**
 * 
 * @export
 * @interface WorkoutTemplateResponseDto
 */
export interface WorkoutTemplateResponseDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutTemplateResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutTemplateResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkoutTemplateResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {Array<WorkoutTemplateExerciseResponseDto>}
     * @memberof WorkoutTemplateResponseDto
     */
    'exercises': Array<WorkoutTemplateExerciseResponseDto>;
}
/**
 * 
 * @export
 * @interface WorkoutTemplateSetRequestDto
 */
export interface WorkoutTemplateSetRequestDto {
    /**
     * 
     * @type {number}
     * @memberof WorkoutTemplateSetRequestDto
     */
    'order': number;
}
/**
 * 
 * @export
 * @interface WorkoutTemplateSetResponseDto
 */
export interface WorkoutTemplateSetResponseDto {
    /**
     * 
     * @type {string}
     * @memberof WorkoutTemplateSetResponseDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof WorkoutTemplateSetResponseDto
     */
    'order': number;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ConfirmEmailVerificationCodeDto} confirmEmailVerificationCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEmailVerificationCode: async (confirmEmailVerificationCodeDto: ConfirmEmailVerificationCodeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'confirmEmailVerificationCodeDto' is not null or undefined
            assertParamExists('confirmEmailVerificationCode', 'confirmEmailVerificationCodeDto', confirmEmailVerificationCodeDto)
            const localVarPath = `/auth/confirm-email-verification-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmEmailVerificationCodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (verifyEmailDto: VerifyEmailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailDto' is not null or undefined
            assertParamExists('forgotPassword', 'verifyEmailDto', verifyEmailDto)
            const localVarPath = `/auth/forgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLoginDto: UserLoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginDto' is not null or undefined
            assertParamExists('login', 'userLoginDto', userLoginDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (resetPasswordDto: ResetPasswordDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordDto' is not null or undefined
            assertParamExists('resetPassword', 'resetPasswordDto', resetPasswordDto)
            const localVarPath = `/auth/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSignupDto} userSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (userSignupDto: UserSignupDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSignupDto' is not null or undefined
            assertParamExists('signup', 'userSignupDto', userSignupDto)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailOnSignup: async (verifyEmailDto: VerifyEmailDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailDto' is not null or undefined
            assertParamExists('verifyEmailOnSignup', 'verifyEmailDto', verifyEmailDto)
            const localVarPath = `/auth/verify-email-on-signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ConfirmEmailVerificationCodeDto} confirmEmailVerificationCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmEmailVerificationCode(confirmEmailVerificationCodeDto: ConfirmEmailVerificationCodeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmEmailVerificationCode(confirmEmailVerificationCodeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.confirmEmailVerificationCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(verifyEmailDto: VerifyEmailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(verifyEmailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.forgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLoginDto: UserLoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userLoginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(resetPasswordDto: ResetPasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(resetPasswordDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserSignupDto} userSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(userSignupDto: UserSignupDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(userSignupDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmailOnSignup(verifyEmailDto: VerifyEmailDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmailOnSignup(verifyEmailDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.verifyEmailOnSignup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {ConfirmEmailVerificationCodeDto} confirmEmailVerificationCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEmailVerificationCode(confirmEmailVerificationCodeDto: ConfirmEmailVerificationCodeDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.confirmEmailVerificationCode(confirmEmailVerificationCodeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(verifyEmailDto: VerifyEmailDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.forgotPassword(verifyEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLoginDto: UserLoginDto, options?: RawAxiosRequestConfig): AxiosPromise<AuthenticationResponseDto> {
            return localVarFp.login(userLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(options?: RawAxiosRequestConfig): AxiosPromise<AuthenticationResponseDto> {
            return localVarFp.refreshToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(resetPasswordDto: ResetPasswordDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPassword(resetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserSignupDto} userSignupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(userSignupDto: UserSignupDto, options?: RawAxiosRequestConfig): AxiosPromise<AuthenticationResponseDto> {
            return localVarFp.signup(userSignupDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailOnSignup(verifyEmailDto: VerifyEmailDto, options?: RawAxiosRequestConfig): AxiosPromise<AuthenticationResponseDto> {
            return localVarFp.verifyEmailOnSignup(verifyEmailDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {ConfirmEmailVerificationCodeDto} confirmEmailVerificationCodeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public confirmEmailVerificationCode(confirmEmailVerificationCodeDto: ConfirmEmailVerificationCodeDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).confirmEmailVerificationCode(confirmEmailVerificationCodeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public forgotPassword(verifyEmailDto: VerifyEmailDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).forgotPassword(verifyEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginDto} userLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(userLoginDto: UserLoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(userLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordDto} resetPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public resetPassword(resetPasswordDto: ResetPasswordDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).resetPassword(resetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserSignupDto} userSignupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signup(userSignupDto: UserSignupDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signup(userSignupDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public verifyEmailOnSignup(verifyEmailDto: VerifyEmailDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).verifyEmailOnSignup(verifyEmailDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExercisesApi - axios parameter creator
 * @export
 */
export const ExercisesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ExerciseRequestDto} exerciseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercise: async (exerciseRequestDto: ExerciseRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseRequestDto' is not null or undefined
            assertParamExists('createExercise', 'exerciseRequestDto', exerciseRequestDto)
            const localVarPath = `/api/exercises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exerciseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExercise: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteExercise', 'id', id)
            const localVarPath = `/api/exercises/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBodyParts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/body-parts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEquipment: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExercises: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/exercises`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExerciseDetails: async (exerciseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseId' is not null or undefined
            assertParamExists('getExerciseDetails', 'exerciseId', exerciseId)
            const localVarPath = `/api/exercises/{exerciseId}/details`
                .replace(`{${"exerciseId"}}`, encodeURIComponent(String(exerciseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesWithWorkoutDetails: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/exercises/workout-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ExerciseRequestDto} exerciseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercise: async (id: string, exerciseRequestDto: ExerciseRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateExercise', 'id', id)
            // verify required parameter 'exerciseRequestDto' is not null or undefined
            assertParamExists('updateExercise', 'exerciseRequestDto', exerciseRequestDto)
            const localVarPath = `/api/exercises/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exerciseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExercisesApi - functional programming interface
 * @export
 */
export const ExercisesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExercisesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ExerciseRequestDto} exerciseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExercise(exerciseRequestDto: ExerciseRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExercise(exerciseRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.createExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExercise(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExercise(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.deleteExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBodyParts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BodyPartDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBodyParts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getAllBodyParts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEquipment(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EquipmentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEquipment(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getAllEquipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllExercises(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExerciseResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllExercises(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getAllExercises']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExerciseDetails(exerciseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExerciseDetails(exerciseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExerciseDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercisesWithWorkoutDetails(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExerciseWithWorkoutDetailsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercisesWithWorkoutDetails(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExercisesWithWorkoutDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {ExerciseRequestDto} exerciseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExercise(id: string, exerciseRequestDto: ExerciseRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExercise(id, exerciseRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.updateExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExercisesApi - factory interface
 * @export
 */
export const ExercisesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExercisesApiFp(configuration)
    return {
        /**
         * 
         * @param {ExerciseRequestDto} exerciseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercise(exerciseRequestDto: ExerciseRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseResponseDto> {
            return localVarFp.createExercise(exerciseRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExercise(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExercise(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBodyParts(options?: RawAxiosRequestConfig): AxiosPromise<Array<BodyPartDto>> {
            return localVarFp.getAllBodyParts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEquipment(options?: RawAxiosRequestConfig): AxiosPromise<Array<EquipmentDto>> {
            return localVarFp.getAllEquipment(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExercises(options?: RawAxiosRequestConfig): AxiosPromise<Array<ExerciseResponseDto>> {
            return localVarFp.getAllExercises(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} exerciseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExerciseDetails(exerciseId: string, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseDetailsDto> {
            return localVarFp.getExerciseDetails(exerciseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercisesWithWorkoutDetails(options?: RawAxiosRequestConfig): AxiosPromise<Array<ExerciseWithWorkoutDetailsDto>> {
            return localVarFp.getExercisesWithWorkoutDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ExerciseRequestDto} exerciseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercise(id: string, exerciseRequestDto: ExerciseRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseResponseDto> {
            return localVarFp.updateExercise(id, exerciseRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExercisesApi - object-oriented interface
 * @export
 * @class ExercisesApi
 * @extends {BaseAPI}
 */
export class ExercisesApi extends BaseAPI {
    /**
     * 
     * @param {ExerciseRequestDto} exerciseRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public createExercise(exerciseRequestDto: ExerciseRequestDto, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).createExercise(exerciseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public deleteExercise(id: string, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).deleteExercise(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getAllBodyParts(options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getAllBodyParts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getAllEquipment(options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getAllEquipment(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getAllExercises(options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getAllExercises(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} exerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExerciseDetails(exerciseId: string, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExerciseDetails(exerciseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercisesWithWorkoutDetails(options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercisesWithWorkoutDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {ExerciseRequestDto} exerciseRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public updateExercise(id: string, exerciseRequestDto: ExerciseRequestDto, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).updateExercise(id, exerciseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateWeeklyWorkoutGoalDto} updateWeeklyWorkoutGoalDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWeeklyWorkoutGoal: async (updateWeeklyWorkoutGoalDto: UpdateWeeklyWorkoutGoalDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateWeeklyWorkoutGoalDto' is not null or undefined
            assertParamExists('updateWeeklyWorkoutGoal', 'updateWeeklyWorkoutGoalDto', updateWeeklyWorkoutGoalDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWeeklyWorkoutGoalDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UpdateWeeklyWorkoutGoalDto} updateWeeklyWorkoutGoalDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWeeklyWorkoutGoal(updateWeeklyWorkoutGoalDto: UpdateWeeklyWorkoutGoalDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWeeklyWorkoutGoal(updateWeeklyWorkoutGoalDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateWeeklyWorkoutGoal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UpdateWeeklyWorkoutGoalDto} updateWeeklyWorkoutGoalDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWeeklyWorkoutGoal(updateWeeklyWorkoutGoalDto: UpdateWeeklyWorkoutGoalDto, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileDto> {
            return localVarFp.updateWeeklyWorkoutGoal(updateWeeklyWorkoutGoalDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UpdateWeeklyWorkoutGoalDto} updateWeeklyWorkoutGoalDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateWeeklyWorkoutGoal(updateWeeklyWorkoutGoalDto: UpdateWeeklyWorkoutGoalDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateWeeklyWorkoutGoal(updateWeeklyWorkoutGoalDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkoutTemplatesApi - axios parameter creator
 * @export
 */
export const WorkoutTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WorkoutTemplateRequestDto} workoutTemplateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkoutTemplate: async (workoutTemplateRequestDto: WorkoutTemplateRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workoutTemplateRequestDto' is not null or undefined
            assertParamExists('createWorkoutTemplate', 'workoutTemplateRequestDto', workoutTemplateRequestDto)
            const localVarPath = `/api/workout-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workoutTemplateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkoutTemplate: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWorkoutTemplate', 'id', id)
            const localVarPath = `/api/workout-templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkoutTemplates: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/workout-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutTemplatesApi - functional programming interface
 * @export
 */
export const WorkoutTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkoutTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {WorkoutTemplateRequestDto} workoutTemplateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkoutTemplate(workoutTemplateRequestDto: WorkoutTemplateRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutTemplateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkoutTemplate(workoutTemplateRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkoutTemplatesApi.createWorkoutTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkoutTemplate(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkoutTemplate(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkoutTemplatesApi.deleteWorkoutTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWorkoutTemplates(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkoutTemplateResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllWorkoutTemplates(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkoutTemplatesApi.getAllWorkoutTemplates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkoutTemplatesApi - factory interface
 * @export
 */
export const WorkoutTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkoutTemplatesApiFp(configuration)
    return {
        /**
         * 
         * @param {WorkoutTemplateRequestDto} workoutTemplateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkoutTemplate(workoutTemplateRequestDto: WorkoutTemplateRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<WorkoutTemplateResponseDto> {
            return localVarFp.createWorkoutTemplate(workoutTemplateRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkoutTemplate(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkoutTemplate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkoutTemplates(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkoutTemplateResponseDto>> {
            return localVarFp.getAllWorkoutTemplates(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkoutTemplatesApi - object-oriented interface
 * @export
 * @class WorkoutTemplatesApi
 * @extends {BaseAPI}
 */
export class WorkoutTemplatesApi extends BaseAPI {
    /**
     * 
     * @param {WorkoutTemplateRequestDto} workoutTemplateRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutTemplatesApi
     */
    public createWorkoutTemplate(workoutTemplateRequestDto: WorkoutTemplateRequestDto, options?: RawAxiosRequestConfig) {
        return WorkoutTemplatesApiFp(this.configuration).createWorkoutTemplate(workoutTemplateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutTemplatesApi
     */
    public deleteWorkoutTemplate(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutTemplatesApiFp(this.configuration).deleteWorkoutTemplate(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutTemplatesApi
     */
    public getAllWorkoutTemplates(options?: RawAxiosRequestConfig) {
        return WorkoutTemplatesApiFp(this.configuration).getAllWorkoutTemplates(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkoutsApi - axios parameter creator
 * @export
 */
export const WorkoutsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WorkoutRequestDto} workoutRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkout: async (workoutRequestDto: WorkoutRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workoutRequestDto' is not null or undefined
            assertParamExists('createWorkout', 'workoutRequestDto', workoutRequestDto)
            const localVarPath = `/api/workouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workoutRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkout: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWorkout', 'id', id)
            const localVarPath = `/api/workouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkouts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/workouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkoutById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWorkoutById', 'id', id)
            const localVarPath = `/api/workouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {WorkoutRequestDto} workoutRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkout: async (id: string, workoutRequestDto: WorkoutRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWorkout', 'id', id)
            // verify required parameter 'workoutRequestDto' is not null or undefined
            assertParamExists('updateWorkout', 'workoutRequestDto', workoutRequestDto)
            const localVarPath = `/api/workouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workoutRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkoutsApi - functional programming interface
 * @export
 */
export const WorkoutsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkoutsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {WorkoutRequestDto} workoutRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkout(workoutRequestDto: WorkoutRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkoutResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkout(workoutRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkoutsApi.createWorkout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkout(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteWorkoutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkout(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkoutsApi.deleteWorkout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWorkouts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkoutResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllWorkouts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkoutsApi.getAllWorkouts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkoutById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkoutById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkoutsApi.getWorkoutById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {WorkoutRequestDto} workoutRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkout(id: string, workoutRequestDto: WorkoutRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkoutResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkout(id, workoutRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkoutsApi.updateWorkout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkoutsApi - factory interface
 * @export
 */
export const WorkoutsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkoutsApiFp(configuration)
    return {
        /**
         * 
         * @param {WorkoutRequestDto} workoutRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkout(workoutRequestDto: WorkoutRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CreateWorkoutResponseDto> {
            return localVarFp.createWorkout(workoutRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkout(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteWorkoutDto> {
            return localVarFp.deleteWorkout(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWorkouts(options?: RawAxiosRequestConfig): AxiosPromise<Array<WorkoutResponseDto>> {
            return localVarFp.getAllWorkouts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkoutById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkoutResponseDto> {
            return localVarFp.getWorkoutById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {WorkoutRequestDto} workoutRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkout(id: string, workoutRequestDto: WorkoutRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<WorkoutResponseDto> {
            return localVarFp.updateWorkout(id, workoutRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkoutsApi - object-oriented interface
 * @export
 * @class WorkoutsApi
 * @extends {BaseAPI}
 */
export class WorkoutsApi extends BaseAPI {
    /**
     * 
     * @param {WorkoutRequestDto} workoutRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutsApi
     */
    public createWorkout(workoutRequestDto: WorkoutRequestDto, options?: RawAxiosRequestConfig) {
        return WorkoutsApiFp(this.configuration).createWorkout(workoutRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutsApi
     */
    public deleteWorkout(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutsApiFp(this.configuration).deleteWorkout(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutsApi
     */
    public getAllWorkouts(options?: RawAxiosRequestConfig) {
        return WorkoutsApiFp(this.configuration).getAllWorkouts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutsApi
     */
    public getWorkoutById(id: string, options?: RawAxiosRequestConfig) {
        return WorkoutsApiFp(this.configuration).getWorkoutById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {WorkoutRequestDto} workoutRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkoutsApi
     */
    public updateWorkout(id: string, workoutRequestDto: WorkoutRequestDto, options?: RawAxiosRequestConfig) {
        return WorkoutsApiFp(this.configuration).updateWorkout(id, workoutRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



